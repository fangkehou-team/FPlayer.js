{"version":3,"file":"../js/FPlayer.min.js","sources":["FPlayer.js"],"sourcesContent":["//fangkehou命名空间，避免混淆\r\nthis.fangkehou = this.fangkehou || {};\r\n\r\n(function () {\r\n    /**\r\n     * <b>介绍</b><br />\r\n     * 欢迎使用FPlayer - Fangkehou Player ！\r\n     * 这是一款针对现代化浏览器设计的音乐播放器，具有界面美观，设置方便的优点（净能瞎吹-_-#）<br/>\r\n     * 您既可以直接以默认设置直接使用，也可以对FPlayer做出自定义的设置\r\n     *\r\n     * FPlayer允许用户通过参数对FPlayer外观，行为进行调整，具体规则及定义如下：\r\n     *\r\n     * @todo 参数的定义\r\n     * {string} mode: 播放模式（可选三个值：FPlayer.MODE_SINGLE 单曲循环, FPlayer.MODE_LIST 列表循环, FPlayer.MODE_RANDOM 列表随机）<br/>\r\n     * {boolean} autoPlay: 加载完成自动播放（仅第一首歌需要该设置，且需要用户同意自动播放或用户在网页内操作后才能自动播放）<br/>\r\n     * {boolean} autoSkip: 播放失败是否自动切换下一曲（true 或 false）\r\n     *\r\n     * 这是FPlayer构造函数，实现了FPlayer与容器和FPlayer设置参数的绑定，同时也承载FPlayer的类定义。\r\n     *\r\n     * @class FPlayer\r\n     * @constructor\r\n     *\r\n     * @param {HTMLElement} container FPlayer将要填充的容器\r\n     * @param {object} options FPlayer设置参数\r\n     *\r\n     * @example\r\n     * var FPlayer = new fangkehou.FPlayer.create(\"container\", {\r\n     *\r\n     * })\r\n     */\r\n    function FPlayer(container, options) {\r\n        this.mContainer = container;\r\n        //填充container\r\n        this._mView = new DOMParser().parseFromString('<div class=\"fplayer_panel\">\\n' +\r\n            '    <div class=\"fplayer_control_panel_background\">\\n' +\r\n            '        <div class=\"fplayer_control_panel\">\\n' +\r\n            '            <div class=\"fplayer_detail_panel\">\\n' +\r\n            '                <p class=\"fplayer_detail_title\">FPlayer</p>\\n' +\r\n            '                <p class=\"fplayer_detail_artist\">Team Fangkehou</p>\\n' +\r\n            '            </div>\\n' +\r\n            '            <div class=\"fplayer_button_controller\" data-action=\"previous\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"48\" height=\"48\" fill=\"white\" fill-opacity=\"0.01\"/><path d=\"M34 36L22 24L34 12\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M14 12V36\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>\\n' +\r\n            '            </div>\\n' +\r\n            '            <div class=\"fplayer_button_controller fplayer_play_or_pause\" data-action=\"play\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"48\" height=\"48\" fill=\"white\" fill-opacity=\"0.01\"/><path d=\"M24 44C35.0457 44 44 35.0457 44 24C44 12.9543 35.0457 4 24 4C12.9543 4 4 12.9543 4 24C4 35.0457 12.9543 44 24 44Z\" fill=\"none\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linejoin=\"round\"/><path d=\"M20 24V17.0718L26 20.5359L32 24L26 27.4641L20 30.9282V24Z\" fill=\"none\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linejoin=\"round\"/></svg>\\n' +\r\n            '            </div>\\n' +\r\n            '            <div class=\"fplayer_button_controller\" data-action=\"next\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"48\" height=\"48\" fill=\"white\" fill-opacity=\"0.01\"/><path d=\"M14 12L26 24L14 36\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M34 12V36\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>\\n' +\r\n            '            </div>\\n' +\r\n            '            <div class=\"fplayer_button_controller\" data-action=\"list\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M24 19H40\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M24 10H40\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M8 38H40\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M8 28H40\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M8 10L16 15L8 20V10Z\" fill=\"none\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linejoin=\"round\"/></svg>\\n' +\r\n            '            </div>\\n' +\r\n            '        </div>\\n' +\r\n            '    </div>\\n' +\r\n            '    <div class=\"fplayer_animation fplayer_lyric_panel\">\\n' +\r\n            '        <div class=\"fplayer_lyric_wrapper\">\\n' +\r\n            '            <p data-id=\"-1\">无歌词</p>\\n' +\r\n            '        </div>\\n' +\r\n            '    </div>\\n' +\r\n            '    <div class=\"fplayer_list_panel\">\\n' +\r\n            '        <div class=\"fplayer_list_item\" data-id=\"-1\" style=\\'background-image: url(\"data:image/svg+xml;utf8,' + '<svg class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"><path d=\"M512 0a512 512 0 1 0 512 512 512 512 0 0 0-512-512z m378.24 448h-197.76a187.52 187.52 0 0 0-37.12-64l116.48-155.52A384 384 0 0 1 890.24 448zM576 512a64 64 0 1 1-64-64 64 64 0 0 1 64 64z m-64 384a384 384 0 1 1 152.32-736.64L541.44 323.2A147.84 147.84 0 0 0 512 320a192 192 0 1 0 180.48 256h197.76A384 384 0 0 1 512 896z\" fill=\"%23FFFFFF\"/></svg>'.replaceAll(\"\\\"\", \"\\\\\\\"\") +'\");\\'>\\n' +\r\n            '            <p class=\"fplayer_list_content\" style=\"top: 0;\">FPlayer</p>\\n' +\r\n            '            <p class=\"fplayer_list_content\" style=\"bottom: 0;\">Team Fangkehou</p>\\n' +\r\n            '        </div>\\n' +\r\n        '    </div>\\n' +\r\n        '</div>', 'text/html').querySelector('.fplayer_panel');\r\n\r\n        container.appendChild(this._mView);\r\n        //获取控制按钮\r\n        let buttons = this._mView.getElementsByClassName(\"fplayer_button_controller\");\r\n        for(let i = 0; i < buttons.length; i++) {\r\n            buttons[i].mFPlayerInstance = this;\r\n            buttons[i].addEventListener(\"click\", function(){\r\n                switch(this.dataset.action){\r\n                    case \"previous\":\r\n                        this.mFPlayerInstance.previous();\r\n                        break;\r\n                    case \"pause\":\r\n                        this.dataset.action = \"play\";\r\n                        this.mFPlayerInstance.pause();\r\n                        break;\r\n                    case \"play\":\r\n                        this.dataset.action = \"pause\";\r\n                        this.mFPlayerInstance.play();\r\n                        break;\r\n                    case \"next\":\r\n                        this.mFPlayerInstance.next();\r\n                        break;\r\n                    case \"list\":\r\n                        this.mFPlayerInstance.openOrCloseList();\r\n                        break;\r\n                }\r\n            })\r\n        }\r\n\r\n        //设置歌词面板点击事件\r\n        let lyric_panel = this._mView.querySelector(\".fplayer_lyric_panel\");\r\n        lyric_panel.mFPlayerInstance = this;\r\n        lyric_panel.addEventListener(\"click\", function () {\r\n            this.mFPlayerInstance.openOrCloseLyric();\r\n        })\r\n        //设置播放列表面板点击事件\r\n        let list_panel = this._mView.querySelector(\".fplayer_list_panel\");\r\n        list_panel.mFPlayerInstance = this;\r\n        list_panel.addEventListener(\"click\", function () {\r\n            this.mFPlayerInstance.openOrCloseList();\r\n        })\r\n\r\n\r\n        this.mMode = options.mode || fangkehou.FPlayer.MODE_LIST;\r\n        this.mAutoSkip = options.autoSkip || true;\r\n\r\n\r\n        this._mPlayer = new Audio();\r\n        this._mPlayer.mFPlayerInstance = this;\r\n        this._mPlayer.addEventListener(\"canplaythrough\", function () {\r\n            this.mFPlayerInstance.mListener(this.mFPlayerInstance, fangkehou.FPlayer.ACTION_ON_LOAD);\r\n            if (this.mFPlayerInstance._mIsPlaying) {\r\n                this.play()\r\n                    .catch();\r\n            }\r\n        })\r\n        this._mPlayer.addEventListener(\"pause\", function () {\r\n            if (this.mFPlayerInstance._mIsPlaying) {\r\n                console.log(\"end of song\");\r\n                this.mFPlayerInstance.mListener(this.mFPlayerInstance, fangkehou.FPlayer.ACTION_ON_NEXT);\r\n                this.mFPlayerInstance.onNext();\r\n            }\r\n        })\r\n        this._mPlayer.addEventListener(\"error\", function () {\r\n            console.log(\"failed to load\")\r\n            this.mFPlayerInstance.mListener(this.mFPlayerInstance, fangkehou.FPlayer.ACTION_ON_FAIL);\r\n            if (this.mFPlayerInstance._mIsPlaying) {\r\n                if (this.mFPlayerInstance.mAutoSkip) {\r\n                    this.mFPlayerInstance.next();\r\n                } else {\r\n                    this.mFPlayerInstance._mView.querySelector('.fplayer_detail_title').innerText = 'There is an error!';\r\n                    this.mFPlayerInstance._mView.querySelector('.fplayer_detail_title').innerText = 'Team Fangkehou';\r\n                    this.mFPlayerInstance.pause();\r\n                }\r\n\r\n            }\r\n        })\r\n        this._mPlayer.addEventListener(\"timeupdate\", function(){\r\n            this.mFPlayerInstance._doLyricChange(this.currentTime);\r\n        })\r\n        console.log(\"%c FPlayer %c https://github.com/fangkehou-team/FPlayer\", \"padding: 5px; font-weight: bold; font-size: 20px; color: #272727; background: #FFD033\", \"padding: 5px; font-weight: bold; font-size: 20px; color: #272727; background: #9EFF3C\");\r\n    }\r\n\r\n    let f = FPlayer.prototype;\r\n    f.constructor = FPlayer;\r\n\r\n    /**\r\n     * FPlayer的创建函数，与 ‘new FPlayer(...)’ 的作用相同，但是container可以使用container的id代替\r\n     *\r\n     * @static\r\n     * @param {string|HTMLElement} container FPlayer将要填充的容器\r\n     * @param {object} options FPlayer设置参数，不设置则使用默认参数（详见 FPlayer构造函数 {@link FPlayer FPlayer()}）\r\n     *\r\n     * @return {FPlayer} FPlayer对象\r\n     *\r\n     * @todo 和yao对接，设置默认参数\r\n     */\r\n    FPlayer.create = function (container, options = {}) {\r\n        if (container instanceof HTMLElement) {\r\n            return new this(container, options);\r\n        }\r\n        if (typeof container === 'string') {\r\n            if (document.getElementById(container)) {\r\n                return new this(document.getElementById(container), options);\r\n            }\r\n        }\r\n        console.error(\"Unable to initialize FPlayer: No valid Container available\");\r\n    }\r\n\r\n    //todo: 和yao对接，完成FPlayer.THEME_ 主题，FPlayer.MODE_ 模式，FPlayer.ACTION_ 事件等常量设置\r\n    /**\r\n     * 监听常量，FPlayer加载完成时触发\r\n     * @type {string}\r\n     */\r\n    FPlayer.ACTION_PREPARE_READY = \"prepare_ready\";\r\n    /**\r\n     * 监听常量，FPlayer加载失败时触发\r\n     * @type {string}\r\n     */\r\n    FPlayer.ACTION_PREPARE_FAIL = \"prepare_fail\";\r\n    /**\r\n     * 监听常量，开始播放时触发\r\n     * @type {string}\r\n     */\r\n    FPlayer.ACTION_ON_PLAY = \"on_play\";\r\n    /**\r\n     * 监听常量，音乐加载完成时触发\r\n     * @type {string}\r\n     */\r\n    FPlayer.ACTION_ON_LOAD = \"on_load\";\r\n    /**\r\n     * 监听常量，暂停时触发\r\n     * @type {string}\r\n     */\r\n    FPlayer.ACTION_ON_PAUSE = \"on_pause\";\r\n    /**\r\n     * 监听常量，切歌时触发\r\n     * @type {string}\r\n     */\r\n    FPlayer.ACTION_ON_SWITCH = \"on_switch\";\r\n    /**\r\n     * 监听常量，下一曲触发\r\n     * @type {string}\r\n     */\r\n    FPlayer.ACTION_ON_NEXT = \"on_next\";\r\n    /**\r\n     * 监听常量，上一曲触发\r\n     * @type {string}\r\n     */\r\n    FPlayer.ACTION_ON_PREVIOUS = \"on_previous\";\r\n    /**\r\n     * 监听常量，失败时触发\r\n     * @type {string}\r\n     */\r\n    FPlayer.ACTION_ON_FAIL = \"on_fail\";\r\n    /**\r\n     * 播放模式，单曲循环\r\n     * @type {string}\r\n     */\r\n    FPlayer.MODE_SINGLE = \"single\";\r\n    /**\r\n     * 播放模式，列表循环\r\n     * @type {string}\r\n     */\r\n    FPlayer.MODE_LIST = \"list\";\r\n    /**\r\n     * 播放模式，列表随机\r\n     * @type {string}\r\n     */\r\n    FPlayer.MODE_RANDOM = \"random\";\r\n\r\n    /**\r\n     * FPlayer将要填充的容器\r\n     * @type {HTMLElement}\r\n     */\r\n    f.mContainer = undefined;\r\n    /**\r\n     * FPlayer主题\r\n     * @type {number}\r\n     */\r\n    f.mTheme = undefined;\r\n    /**\r\n     * FPlayer音乐列表\r\n     * @type {Array<Music>}\r\n     */\r\n    f.mMusicList = [];\r\n    /**\r\n     * FPlayer播放模式\r\n     * @type {number}\r\n     */\r\n    f.mMode = undefined;\r\n    /**\r\n     * FPlayer事件监听器\r\n     * @type {function(FPlayer, string)}\r\n     * @param {FPlayer} player 监听返回的播放器\r\n     * @param {string} event 监听ACTION\r\n     */\r\n    f.mListener = function (player, event) {\r\n\r\n    };\r\n    /**\r\n     * 播放失败自动下一曲\r\n     * @type {boolean}\r\n     */\r\n    f.mAutoSkip = true;\r\n    /**\r\n     * FPlayer的view\r\n     * @type {HTMLElement}\r\n     * @private\r\n     */\r\n    f._mView = undefined;\r\n    /**\r\n     * 音量\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    f._mVolume = undefined;\r\n    /**\r\n     * 播放列表（真正的播放顺序）\r\n     * @type {Music[]}\r\n     * @private\r\n     */\r\n    f._mPlayList = [];\r\n    /**\r\n     * 当前播放音乐Id\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    f._mCurrentId = undefined;\r\n    /**\r\n     * 当前播放使用的audio标签\r\n     * @type {HTMLAudioElement}\r\n     * @private\r\n     */\r\n    f._mPlayer = undefined;\r\n    /**\r\n     * 当前是否播放音乐\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    f._mIsPlaying = false;\r\n    /**\r\n     * 当前音乐的lyric数组\r\n     * @type {Lyric[]}\r\n     * @private\r\n     */\r\n    f._mCurrentLyric = [];\r\n    /**\r\n     * 当前播放到的lyric id\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    f._mCurrentLyricId = undefined;\r\n    /**\r\n     * 该lyric开始时间\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    f._mCurrentLyricStartTime = undefined;\r\n    /**\r\n     * 该lyric停止时间\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    f._mCurrentLyricEndTime = undefined;\r\n    /**\r\n     * 当前是否正显示列表\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    f._mIsShowList = false;\r\n    /**\r\n     * 当前是否正显示歌词\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    f._mIsShowLyric = false;\r\n\r\n    /**\r\n     * 设置主题\r\n     *\r\n     * @function setTheme\r\n     * @param {number} theme\r\n     */\r\n    f.setTheme = function (theme) {\r\n        this.mTheme = theme;\r\n        //todo: 更新view\r\n    }\r\n    /**\r\n     * 获取当前主题\r\n     * @function getTheme\r\n     * @returns {number} 主题代码\r\n     */\r\n    f.getTheme = function () {\r\n        return this.mTheme;\r\n    }\r\n    /**\r\n     * 设置音乐列表\r\n     * @function setMusicList\r\n     * @param {Array<Music>} list 音乐列表\r\n     */\r\n    f.setMusicList = function (list) {\r\n        this.mMusicList = list;\r\n        this._updateList();\r\n        this.switch(0);\r\n    }\r\n    /**\r\n     * 获取音乐列表\r\n     * @function getMusicList\r\n     * @returns {Array<Music>}\r\n     */\r\n    f.getMusicList = function () {\r\n        return this.mMusicList;\r\n    }\r\n    /**\r\n     * 添加音乐到列表末尾\r\n     * @function addMusic\r\n     * @param {Music} music\r\n     */\r\n    f.addMusic = function (music) {\r\n        this.mMusicList[this.mMusicList.length] = music;\r\n        this._mPlayList[this._mPlayList.length] = music;\r\n        if (typeof this._mCurrentId == \"undefined\") {\r\n            this.switch(0);\r\n        } else {\r\n            this._refreshList();\r\n        }\r\n        this._updateList();\r\n    }\r\n\r\n    /**\r\n     * 设置播放模式\r\n     * @function setMode\r\n     * @param {number} mode\r\n     */\r\n    f.setMode = function (mode) {\r\n        this.mMode = mode;\r\n        this._refreshList();\r\n    }\r\n    /**\r\n     * 获取当前播放模式\r\n     * @function getMode\r\n     * @returns {number}\r\n     */\r\n    f.getMode = function () {\r\n        return this.mMode;\r\n    }\r\n    /**\r\n     * 设置监听器\r\n     * @function setListener\r\n     * @param {function(FPlayer, number)} listener\r\n     */\r\n    f.setListener = function (listener) {\r\n        this.mListener = listener;\r\n    }\r\n\r\n\r\n    f.openOrCloseList = function (){\r\n        let list_container = this._mView.querySelector(\".fplayer_list_panel\");\r\n        if (this._mIsShowList == false) {\r\n            list_container.style.cssText = \"z-index: 1;transform: translateY(0px);transition: all 600ms cubic-bezier(.23, 1, .32, 1);\";\r\n            this._mIsShowList = true;\r\n        } else {\r\n            list_container.style.cssText = \"z-index:1;transform: translateY(160px);transition: all 600ms cubic-bezier(.23, 1, .32, 1);\";\r\n            this._mIsShowList = false;\r\n        }\r\n    }\r\n\r\n    f.openOrCloseLyric = function(){\r\n        let lyric_container = this._mView.querySelector(\".fplayer_lyric_panel\");\r\n        let lyric_wrapper = this._mView.querySelector(\".fplayer_lyric_wrapper\");\r\n        if (this._mIsShowLyric == false) {\r\n            lyric_container.style.cssText = \"width: 100%;height:100%;transition: all 600ms cubic-bezier(.23, 1, .32, 1);\";\r\n            lyric_wrapper.style.cssText = \"width:100%;height:100%;overflow: scroll;scrollbar-width: none;margin-left:0%;transition: all 600ms cubic-bezier(.23, 1, .32, 1);\";\r\n            this._mIsShowLyric = true;\r\n        } else {\r\n            lyric_container.style.cssText = \"width: 100%;height:40px;transition: all 600ms cubic-bezier(.23, 1, .32, 1);\";\r\n            lyric_wrapper.style.cssText = \"width:90%;height:100%;overflow: hidden;position: absolute;transition: all 600ms cubic-bezier(.23, 1, .32, 1);\";\r\n            this._mIsShowLyric = false;\r\n        }\r\n    }\r\n    /**\r\n     * 播放逻辑\r\n     * @function play\r\n     */\r\n    f.play = function () {\r\n        this._mView.querySelector(\".fplayer_play_or_pause\").innerHTML = '<svg width=\"24\" height=\"24\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"48\" height=\"48\" fill=\"white\" fill-opacity=\"0.01\"/><path d=\"M24 44C35.0457 44 44 35.0457 44 24C44 12.9543 35.0457 4 24 4C12.9543 4 4 12.9543 4 24C4 35.0457 12.9543 44 24 44Z\" fill=\"none\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linejoin=\"round\"/><path d=\"M19 18V30\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M29 18V30\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>';\r\n        this._mIsPlaying = true;\r\n        if (this._mPlayer.readyState >= 2) {\r\n            this._mPlayer.play()\r\n                .catch();\r\n        }\r\n    }\r\n    /**\r\n     * 暂停逻辑\r\n     * @function pause\r\n     */\r\n    f.pause = function () {\r\n        this._mView.querySelector(\".fplayer_play_or_pause\").innerHTML = '<svg width=\"24\" height=\"24\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"48\" height=\"48\" fill=\"white\" fill-opacity=\"0.01\"/><path d=\"M24 44C35.0457 44 44 35.0457 44 24C44 12.9543 35.0457 4 24 4C12.9543 4 4 12.9543 4 24C4 35.0457 12.9543 44 24 44Z\" fill=\"none\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linejoin=\"round\"/><path d=\"M20 24V17.0718L26 20.5359L32 24L26 27.4641L20 30.9282V24Z\" fill=\"none\" stroke=\"#FFF\" stroke-width=\"4\" stroke-linejoin=\"round\"/></svg>';\r\n        this._mIsPlaying = false;\r\n        this._mPlayer.pause();\r\n    }\r\n    /**\r\n     * 设置进度\r\n     * @param {number} progress\r\n     */\r\n    f.setProgress = function (progress) {\r\n        if (this._mPlayer.readyState >= 2 && this._mPlayer.duration >= progress) {\r\n            this._mPlayer.currentTime = progress;\r\n        }\r\n    }\r\n    /**\r\n     * 音量修改\r\n     * @param {number} volume\r\n     */\r\n    f.setVolume = function (volume) {\r\n        if(volume >= 0 && volume <= 1){\r\n            this._mPlayer.volume = volume;\r\n            return;\r\n        }\r\n        console.error(\"FPlayer: Failed to set volume\");\r\n    }\r\n    /**\r\n     * 播放器的下一首逻辑\r\n     * @function onNext\r\n     */\r\n    f.onNext = function () {\r\n        console.log(\"onNext\");\r\n        if (this.mMode === fangkehou.FPlayer.MODE_SINGLE) {\r\n            console.log(\"single mode\");\r\n            this._pushSong(this._mPlayList[0]);\r\n            this.mListener(this, fangkehou.FPlayer.ACTION_ON_NEXT);\r\n            return;\r\n        }\r\n        this.next();\r\n    }\r\n    /**\r\n     * 用户指定下一首逻辑\r\n     * @function next\r\n     */\r\n    f.next = function () {\r\n        let current = this._mPlayList[0];\r\n        this._mPlayList.shift();\r\n        this._mPlayList.push(current);\r\n        current = this._mPlayList[0];\r\n        this._pushSong(current);\r\n        this.play();\r\n        this.mListener(this, fangkehou.FPlayer.ACTION_ON_NEXT);\r\n    }\r\n    /**\r\n     * 用户指定上一首逻辑\r\n     * @function previous\r\n     */\r\n    f.previous = function () {\r\n        let current = this._mPlayList[this._mPlayList.length - 1];\r\n        this._mPlayList.unshift(current);\r\n        this._mPlayList.pop();\r\n        this._pushSong(current);\r\n        this.mListener(this, fangkehou.FPlayer.ACTION_ON_PREVIOUS);\r\n    }\r\n    /**\r\n     * 切歌并重新计算播放列表\r\n     * @function switch\r\n     * @param {number} id\r\n     */\r\n    f.switch = function (id) {\r\n        this._mPlayList = [];\r\n        for (let i = id; i < this.mMusicList.length; i++) {\r\n            this._mPlayList[this._mPlayList.length] = this.mMusicList[i];\r\n        }\r\n        for (let i = 0; i < id; i++) {\r\n            this._mPlayList[this._mPlayList.length] = this.mMusicList[i];\r\n        }\r\n        this._refreshList();\r\n        let current = this._mPlayList[0];\r\n        this._pushSong(current);\r\n        this.mListener(this, fangkehou.FPlayer.ACTION_ON_SWITCH);\r\n    }\r\n    /**\r\n     * 更新列表view\r\n     * @private\r\n     */\r\n    f._updateList = function () {\r\n        if(this.mMusicList.length == 0){\r\n            return;\r\n        }\r\n        let listString = '';\r\n        for(let i = 0; i < this.mMusicList.length; i++){\r\n            listString += '<div class=\"fplayer_list_item\" data-id=\"' + i + '\" style=\\'background-image: url(\"' + this.mMusicList[i].cover +'\");\\'>\\n' +\r\n                '    <p class=\"fplayer_list_content\" style=\"top: 0;\">' + this.mMusicList[i].name + '</p>\\n' +\r\n                '    <p class=\"fplayer_list_content\" style=\"bottom: 0;\">' + this.mMusicList[i].artist + '</p>\\n' +\r\n                '</div>'\r\n        }\r\n        let listElements = new DOMParser().parseFromString(listString, 'text/html').getElementsByClassName(\"fplayer_list_item\");\r\n        let listPanel = this._mView.querySelector(\".fplayer_list_panel\");\r\n        listPanel.innerHTML = '';\r\n\r\n        for(let i = 0; i < listElements.length; i++){\r\n            listElements[i].mFPlayerInstance = this;\r\n            listElements[i].addEventListener(\"click\", function(){\r\n                this.mFPlayerInstance.switch(this.dataset.id);\r\n            })\r\n            listPanel.appendChild(listElements[i]);\r\n        }\r\n    }\r\n    /**\r\n     * 重新生成随机列表\r\n     * @function _refreshList\r\n     * @private\r\n     */\r\n    f._refreshList = function () {\r\n        if (this.mMode !== fangkehou.FPlayer.MODE_RANDOM) {\r\n            return;\r\n        }\r\n        let current = this._mPlayList[0];\r\n        this._mPlayList.shift();\r\n        let l = this._mPlayList.length;\r\n        let index, temp;\r\n        while (l > 0) {\r\n            index = Math.floor(Math.random() * l);\r\n            temp = this._mPlayList[l - 1];\r\n            this._mPlayList[l - 1] = this._mPlayList[index];\r\n            this._mPlayList[index] = temp;\r\n            l--;\r\n        }\r\n        this._mPlayList.unshift(current);\r\n    }\r\n    /**\r\n     * 通过Music类获取id\r\n     * @function _getIdByMusic\r\n     * @param {Music} music 待寻找音乐\r\n     * @returns {number} id\r\n     * @private\r\n     */\r\n    f._getIdByMusic = function (music) {\r\n        if (this.mMusicList.length == 0) {\r\n            return -1;\r\n        }\r\n        for (let i = 0; i < this.mMusicList.length; i++) {\r\n            if (music.equals(this.mMusicList[i])) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    /**\r\n     * 向播放器推送歌曲并初始化\r\n     * @function _pushSong\r\n     * @param {Music} music\r\n     * @private\r\n     */\r\n    f._pushSong = function (music) {\r\n        console.log(\"pushSong\")\r\n        if (typeof this._mCurrentId != \"undefined\" && music.equals(this.mMusicList[this._mCurrentId])) {\r\n            console.log(\"single\");\r\n            if (this._mPlayer.readyState >= 2) {\r\n                this._mPlayer.play()\r\n                    .catch();\r\n            }\r\n            return;\r\n        }\r\n        console.log(\"next\")\r\n        this._mCurrentId = this._getIdByMusic(music);\r\n        this._mCurrentLyric = music.lrc;\r\n        this._switchLyric(0);\r\n\r\n        //view更新\r\n        this._mView.querySelector('.fplayer_detail_title').innerHTML = music.name;\r\n        this._mView.querySelector('.fplayer_detail_artist').innerHTML = music.artist;\r\n        this._mView.querySelector('.fplayer_control_panel_background').style.backgroundImage = 'url(\"' + music.cover + '\")';\r\n\r\n        //歌词view更新\r\n        if(music.lrc.length > 0){\r\n            let lyricString = '';\r\n            for(let i = 0; i < music.lrc.length; i++){\r\n                lyricString += '<p data-id=\"' + i + '\">' + music.lrc[i].lyric + '</p>'\r\n            }\r\n            this._mView.querySelector('.fplayer_lyric_wrapper').innerHTML = lyricString;\r\n        }\r\n\r\n        this._mPlayer.src = music.content;\r\n        this._mPlayer.load();\r\n    }\r\n    /**\r\n     * player的监听，负责控制歌词\r\n     * @param {number} currentTime 当前进度\r\n     * @private\r\n     */\r\n    f._doLyricChange = function(currentTime){\r\n        if(currentTime >= this._mCurrentLyricStartTime && currentTime < this._mCurrentLyricEndTime){\r\n            //todo: view更新(日后可能会有)\r\n        }else if(currentTime >= this._mCurrentLyricEndTime && this._mCurrentLyricId < this._mCurrentLyric.length - 1){\r\n            for(let i = this._mCurrentLyricId; i < this._mCurrentLyric.length; i++){\r\n                if(currentTime <= this._mCurrentLyric[i].time){\r\n                    this._switchLyric(i - 1);\r\n                    break;\r\n                }\r\n            }\r\n        }else if(currentTime <= this._mCurrentLyricStartTime){\r\n            for(let i = 0; i < this._mCurrentLyricId + 1; i++){\r\n                if(currentTime <= this._mCurrentLyric[i].time){\r\n                    this._switchLyric(i - 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 切换歌词到新的一行\r\n     * @param {number} currentLyricId 应该切换到的歌词id\r\n     * @private\r\n     */\r\n    f._switchLyric = function(currentLyricId){\r\n        if(currentLyricId < 0){\r\n            currentLyricId = 0;\r\n        }\r\n        if(this._mCurrentLyric[currentLyricId].lyric.length != 0){\r\n            this._mCurrentLyricId = currentLyricId;\r\n            this._mCurrentLyricStartTime = this._mCurrentLyric[currentLyricId].time;\r\n            if(typeof this._mCurrentLyric[currentLyricId + 1] != \"undefined\"){\r\n                this._mCurrentLyricEndTime = this._mCurrentLyric[currentLyricId + 1].time;\r\n            }\r\n            this._mView.querySelector(\".fplayer_lyric_wrapper\").style.top = -40 * currentLyricId + 'px';\r\n        }else{\r\n            this._mCurrentLyricId = currentLyricId;\r\n            this._mCurrentLyricEndTime = this._mCurrentLyric[currentLyricId + 1].time;\r\n        }\r\n    }\r\n\r\n    fangkehou.FPlayer = FPlayer;\r\n\r\n}())\n//fangkehou命名空间，避免混淆\r\nthis.fangkehou = this.fangkehou || {};\r\n\r\n(function () {\r\n    /**\r\n     * Lyric 歌词类\r\n     *\r\n     * 主要功能为表示和解析歌词，每一个Lyric实例是一行歌词。\r\n     *\r\n     * 一般情况下Lyric类会以 Array<Lyric> 的形式出现，Lyric类中也有专门的方法将lrc文件（字符串形式）转换成Lyric数组\r\n     *\r\n     * 这是Lyric类的构造函数，同时也承载Lyric的类定义。\r\n     *\r\n     * @constructor\r\n     *\r\n     * @param {number} time 开始时间\r\n     * @param {string} lyric 歌词文本\r\n     *\r\n     */\r\n    function Lyric(time, lyric) {\r\n        this.time = time;\r\n        this.lyric = lyric;\r\n    }\r\n\r\n    let l = Lyric.prototype;\r\n    l.constructor = Lyric;\r\n\r\n    /**\r\n     * 这段歌词开始的时间\r\n     * @type {number}\r\n     */\r\n    l.time = undefined;\r\n    /**\r\n     * 这段歌词的文本\r\n     * @type {string}\r\n     */\r\n    l.lyric = undefined;\r\n\r\n    /**\r\n     * 可能是Lyric类中唯一的函数了。。。。。负责解析lrc文件（字符串个事）\r\n     * @param {string} lrcString\r\n     * @returns {Lyric[]}\r\n     */\r\n    Lyric.fromLrcString = function(lrcString){\r\n        //先把歌词通过回车切分\r\n        let lyricLines = lrcString.split('\\n');\r\n        let lyricsList = [];\r\n        let offset = 0;\r\n        for(let i = 0; i < lyricLines.length; i++){\r\n            //去掉每个tag前和后的空格\r\n            let currentLyric = lyricLines[i].replace(/[\\s]*\\[/g, \"[\").replace(/][\\s]*/g, \"]\");\r\n            let time = currentLyric.substring(currentLyric.indexOf(\"[\") + 1, currentLyric.indexOf(\"]\")).split(':');\r\n            //根据定义这里有个offset数值，是歌词整体的偏移量，应该识别一下\r\n            if(time[0].toLowerCase() == \"offset\"){\r\n                offset = parseInt(time[1]);\r\n                continue;\r\n            }\r\n            //剩下的非时间标签抛掉就好了，对歌词显示没什么用\r\n            if(isNaN(parseInt(time[0]))){\r\n                continue;\r\n            }\r\n            //一行歌词可能有多个时间tag，分别代表不同的时间点，应该分出来（这个是lrc格式最烦人的点）\r\n            let reg = /\\[[0-9:.]*]/g;\r\n            time = currentLyric.match(reg);\r\n            let lyricStart = 0;\r\n            for(let x = 0; x < time.length; x++){\r\n                lyricStart += time[x].length;\r\n            }\r\n            let lyricString = currentLyric.substring(lyricStart);\r\n            for(let x = 0; x < time.length; x++){\r\n                let lyricTime = time[x].substring(1, time[x].length);\r\n                lyricTime = lyricTime.split(':');\r\n                //把时间转换成秒数（带有一个三位小数表示毫秒）\r\n                lyricTime = parseFloat(Math.max((parseInt(lyricTime[0]) * 60 + parseFloat(lyricTime[1]) + offset / 1000.0), 0.0).toFixed(3));\r\n                lyricsList[lyricsList.length] = new fangkehou.Lyric(lyricTime, lyricString);\r\n            }\r\n        }\r\n        //把混乱的歌词排序\r\n        lyricsList.sort((a, b) => {\r\n            return a.time - b.time;\r\n        })\r\n        return lyricsList;\r\n    }\r\n\r\n    //文档在{@link Lyric}中。。。。。。\r\n    fangkehou.Lyric = Lyric;\r\n}())\n//fangkehou命名空间，避免混淆\r\nthis.fangkehou = this.fangkehou || {};\r\n\r\n(function () {\r\n    /**\r\n     * Music 歌曲类\r\n     *\r\n     * 主要功能为保存歌曲信息，同时也可以处理部分关于歌词和音频内容的参数\r\n     *\r\n     * 会自动把lrc格式的歌词转化成Lyric数组，或者把\r\n     *\r\n     * 这是Music类的构造函数，同时也承载Music的类定义。\r\n     *\r\n     * @class Music\r\n     * @constructor\r\n     *\r\n     * @param {string} name 歌曲名\r\n     * @param {string} artist 演唱者\r\n     * @param {string} cover 封面链接\r\n     * @param {string|Lyric[]} lrc 歌词（可以是排序过的Lyric数组，也可以是Lrc文件（字符串格式））\r\n     * @param {string|Blob} content 音频内容（可以是链接（本地或在线）或者Blob类）\r\n     */\r\n    function Music(name, artist, cover, lrc, content) {\r\n        this.name = name;\r\n        this.artist = artist;\r\n        this.cover = cover;\r\n        if(typeof lrc === 'string'){\r\n            this.lrc = fangkehou.Lyric.fromLrcString(lrc);\r\n        }\r\n        if(lrc instanceof Array){\r\n            this.lrc = lrc;\r\n        }\r\n        if(typeof content === 'string'){\r\n            this.content = content;\r\n        }\r\n        if(content instanceof Blob){\r\n            this.content = URL.createObjectURL(content);\r\n        }\r\n    }\r\n\r\n    let m  = Music.prototype;\r\n    m.constructor = Music;\r\n\r\n    /**\r\n     * 音乐名称\r\n     * @type {string}\r\n     */\r\n    m.name = undefined;\r\n    /**\r\n     * 歌手\r\n     * @type {string}\r\n     */\r\n    m.artist = undefined;\r\n    /**\r\n     * 封面（链接，http或blob或base64）\r\n     * @type {string}\r\n     */\r\n    m.cover = undefined;\r\n    /**\r\n     * 歌词（Lyric数组）\r\n     * @type {Lyric[]}\r\n     */\r\n    m.lrc = undefined;\r\n    /**\r\n     * 音频内容（blob或http）\r\n     * @type {string}\r\n     */\r\n    m.content = undefined;\r\n    /**\r\n     * 判断两个Music类是否相同，通过概率判断\r\n     * @function equals\r\n     * @param {Music} music\r\n     */\r\n    m.equals = function (music) {\r\n        let result = 0;\r\n        if(this.name === music.name) {\r\n            result++;\r\n        }\r\n        if(this.artist === music.artist){\r\n            result++;\r\n        }\r\n        if(this.content === music.content){\r\n            result++;\r\n        }\r\n        if(this.cover === music.cover){\r\n            result++;\r\n        }\r\n        if(result >= 2){\r\n            return true;\r\n        }\r\n        return this.lrc === music.lrc;\r\n\r\n    }\r\n\r\n    //文档在{@link Music}中。。。。。。\r\n    fangkehou.Music = Music;\r\n\r\n}())"],"names":["this","fangkehou","FPlayer","container","options","mContainer","_mView","DOMParser","parseFromString","replaceAll","querySelector","appendChild","let","buttons","getElementsByClassName","i","length","mFPlayerInstance","addEventListener","dataset","action","previous","pause","play","next","openOrCloseList","lyric_panel","list_panel","openOrCloseLyric","mMode","mode","MODE_LIST","mAutoSkip","autoSkip","_mPlayer","Audio","mListener","ACTION_ON_LOAD","_mIsPlaying","catch","console","log","ACTION_ON_NEXT","onNext","ACTION_ON_FAIL","innerText","_doLyricChange","currentTime","f","prototype","constructor","create","HTMLElement","document","getElementById","error","ACTION_PREPARE_READY","ACTION_PREPARE_FAIL","ACTION_ON_PLAY","ACTION_ON_PAUSE","ACTION_ON_SWITCH","ACTION_ON_PREVIOUS","MODE_SINGLE","MODE_RANDOM","undefined","mTheme","mMusicList","player","event","_mVolume","_mPlayList","_mCurrentId","_mCurrentLyric","_mCurrentLyricId","_mCurrentLyricStartTime","_mCurrentLyricEndTime","_mIsShowList","_mIsShowLyric","setTheme","theme","getTheme","setMusicList","list","_updateList","switch","getMusicList","addMusic","music","_refreshList","setMode","getMode","setListener","listener","list_container","style","cssText","lyric_container","lyric_wrapper","innerHTML","readyState","setProgress","progress","duration","setVolume","volume","_pushSong","current","shift","push","unshift","pop","id","listString","cover","name","artist","listElements","listPanel","index","temp","l","Math","floor","random","_getIdByMusic","equals","lrc","_switchLyric","backgroundImage","lyricString","lyric","src","content","load","time","currentLyricId","top","Lyric","fromLrcString","lrcString","lyricLines","split","lyricsList","offset","currentLyric","replace","substring","indexOf","toLowerCase","isNaN","parseInt","match","lyricStart","x","lyricTime","parseFloat","max","toFixed","sort","a","b","Music","Array","Blob","URL","createObjectURL","m","result"],"mappings":"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"}